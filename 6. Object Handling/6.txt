=======>
a1.
Object Creation (Literal)
    Object creation (literal) means creating an object directly using {} without using any class, constructor, or function.

    Why ?
    * It's quick and easy to create small objects.
    * Best for simple data structures like settings, configurations, simple records, etc.
    * Readable and clean syntax.

    How ?
    Use curly braces {} and define key: value pairs inside.

    Syntax 
    let obj = {
      key1: value1,
      key2: value2
    };
<=======

=======>
a2.
Object Creation (Constructor)
    Object creation (constructor) means creating objects using a constructor function (special function meant to build objects).
    Itâ€™s a blueprint to create multiple objects with the same structure easily.

    Why?
    * Reuse code to create many similar objects.
    * Dynamic: Each object can have different values.
    * Used when you need a lot of similar objects (like users, products, etc.)

    How ?
    1. Define a function (constructor) with capital first letter (by convention).
    2. Inside, use this.key = value.
    3. Use new keyword to create objects.
<=======

=======>
a3.
Property Access
    Property Access means getting (reading) or setting (changing) the value of a key inside an object.

    Why?
    * To use the object's data.
    * To update or modify properties.
    * To dynamically access keys.

    How?
    There are two ways:
    1. Dot Notation â€” easiest and most common
    2. Bracket Notation â€” useful when the key is dynamic or has special characters
<=======

=======>
a4.
Property Deletion
    Property Deletion means removing a key-value pair from an object completely.

    Why?
    * To clean up unused data.
    * To remove sensitive or temporary properties.
    * To update the object structure.

    How?
    Use the delete keyword.

    Syntax
    delete object.property;     (or)   delete object["property"];
<=======

=======>
a5.
Destructuring
    Destructuring means pulling out properties from an object and storing them directly into variables.
    (Instead of accessing each property manually.)

    Why?
    * Makes code shorter and cleaner.
    * Easier to grab multiple values at once.
    * Organizes your code better.

    How?
    Syntax 
    const { key1, key2 } = object;
<=======

=======>
a6.
Spread Operator
    The spread operator (...) is used to copy or expand properties of one object into another object.
    Basically:
    ðŸ‘‰ Take everything from an object and spread it somewhere else.

    Why?
    * To copy objects easily.
    * To merge objects together.
    * To add or update properties while copying.

    How?
    Syntax 
    const newObject = { ...oldObject };
<=======

=======>
a7.
Rest Operator
    The rest operator (...) is used to collect the remaining properties of an object into a new object after some properties are pulled out.
    ðŸ‘‰ It's like:
    * "Take the rest of the properties and put them together!"

    Why?
    * To extract only what you need.
    * To separate or filter properties easily.
    * To clean up objects without mutating the original.

    How?
    Itâ€™s used inside destructuring like this:
    const { key1, key2, ...rest } = object;
<=======

=======>
a8.
Object.keys()
    Object.keys() is a method that returns an array of the objectâ€™s own property names (keys).
    ðŸ‘‰ Only keys, not values.
    ðŸ‘‰ Only enumerable (visible) properties.

    Why?
    * To get all keys of an object quickly.
    * Useful for looping, validations, or counting properties.

    How?
    Object.keys(object);
<=======

=======>
a9.
Object.values()
    Object.values() is a method that returns an array of an objectâ€™s own property values.
    ðŸ‘‰ Only values, not keys.
    ðŸ‘‰ Only enumerable (visible) properties.

    Why?
    * To get all the values of an object quickly.
    * Useful for processing, searching, or filtering data.

    How?
    Object.values(object);
<=======

=======>
b1.
Object.entries()
    Object.entries() is a method that returns an array of arrays, where each inner array is a key-value pair from the object.
    ðŸ‘‰ You get both keys and values together.

    Why?
    * To work with both key and value at the same time.
    * Very useful for looping, transforming, or mapping objects.

    How?
    Object.entries(object);
<=======

=======>
b2.
Optional Chaining (?.)
    Optional Chaining allows you to safely access deeply nested properties of an object without worrying about whether intermediate properties are null or undefined.
    ðŸ‘‰ If a property is null or undefined, it wonâ€™t throw an error.
    ðŸ‘‰ It returns undefined instead of throwing a TypeError.

    Why?
    * To avoid runtime errors when accessing deep properties in objects that might not exist.
    * Makes your code cleaner and avoids manual checks like if statements.

    How?
    const result = object?.property?.subproperty;
    (If any part of the chain is null or undefined, it stops and returns undefined instead of throwing an error.)
<=======

=======>
b3.
Nullish Coalescing (??)
    The Nullish Coalescing Operator (??) is used to provide a default value when the left-hand side is null or undefined.
    ðŸ‘‰ It only checks for null or undefined, not other falsy values like 0, false, or "".

    Why?
    * To safely assign fallback values when something might be null or undefined.
    * Better and more precise than using || (logical OR), because || treats many things as falsy.

    How?
    const result = value ?? defaultValue;

    If value is null or undefined, it will return defaultValue.
    Otherwise, it returns value.
<=======

=======>
b4.
Object.freeze()
    Object.freeze() is a method that freezes an object.
    ðŸ‘‰ It means: You cannot add, remove, or change properties of the object anymore.
    ðŸ‘‰ The object becomes immutable (unchangeable).

    Why?
    * To protect objects from being modified accidentally.
    * Useful for creating constant configurations, settings, or secure data structures.

    How?
    Object.freeze(object);
<=======

=======>
b5.
Object.seal()
    Object.seal() is a method that seals an object.
    ðŸ‘‰ You cannot add or delete properties.
    ðŸ‘‰ But you can still modify (update) the existing properties.

    Why?
    * To prevent structure changes (no adding/removing properties) while allowing updates to existing data.
    * Useful when you want a fixed shape object but editable values.

    How?
    Object.seal(object);
<=======

=======>
b6.
Shallow Copy
    A shallow copy means copying only the top-level properties of an object.
    ðŸ‘‰ If a property is a primitive (number, string, boolean), it copies the value.
    ðŸ‘‰ If a property is a reference type (object, array), it copies the reference, NOT the actual object.

    Why?
    * To quickly make a simple copy of an object.
    * Useful when deep relationships inside the object are not important.

    How?
    âœ… Using Object.assign():
    const copy = Object.assign({}, original);

    âœ… Using spread operator (...):
    const copy = { ...original };
<=======

=======>
b7.
Deep Copy
    A deep copy means copying everything, including nested objects.
    ðŸ‘‰ It creates a completely independent clone â€” no shared references.
    ðŸ‘‰ Changing the copy won't affect the original at any depth.

    Why?
    * When your object has nested objects/arrays and you want a full independent copy.
    * To avoid accidental changes in the original object when modifying the copy.

    How?
    âœ… Using structuredClone() (modern and best way):
    const deepCopy = structuredClone(original);

    âœ… Using JSON.parse(JSON.stringify(object)) (older method):
    const deepCopy = JSON.parse(JSON.stringify(original));
<=======

=======>
b8.
JSON.parse()
    JSON.parse() is a method that converts a JSON string into a JavaScript object.
    ðŸ‘‰ JSON (JavaScript Object Notation) is a string format to represent objects/data.
    ðŸ‘‰ JSON.parse() reads that string and builds the real object back.

    Why?
    * To convert data received (from APIs, files, storage) into usable JavaScript objects.
    * To work with JSON data easily in your code.

    How?
    const obj = JSON.parse(jsonString);
        You give it a valid JSON string, and it gives you a real object.
<=======

=======>
b9.
JSON.stringify()
<=======

=======>
c1.
Prototypes
<=======

=======>
c2.
Inheritance
<=======
