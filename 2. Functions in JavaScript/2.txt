=======>
Function Declaration
    A Function Declaration is the most common way to define a function in JavaScript 
    using the function keyword.
<=======

=======>
Function Expression
    A Function Expression is when you assign a function to a variable.

    Unlike function declarations, function expressions are NOT hoisted, 
    so you cannot use them before they are defined.


Diff B/W regular function and function expression
// Feature                  | Function Declaration | Function Expression
// Keyword used             | function             | function (assigned to var)
// Hoisting                 | ✅ Yes               | ❌ No
// Can be anonymous         | ❌ No                | ✅ Yes (can be anonymous)
// Example Call Before Def. | ✅ Works             | ❌ Error
<=======

=======>
Arrow functions
    Arrow functions are a shorter and cleaner way to write function expressions introduced in ES6.
<=======

=======>
First-Class Functions
    In JavaScript, functions are treated as values, meaning they can be:
        * stored in variables,
        * passed as arguments,
        * returned from other functions.
<=======

=======>
Higher-Order Functions
        A Higher-Order Function is a function that does at least one of the following:
        1. Takes another function as an argument, or
        2. Returns a function.
<=======

=======>
Callback function
    A callback function is a function that is passed as an argument to another function and is executed later, 
    usually after some task is done.
<=======

=======>
Function Currying
    A function with multiple arguments is transformed into a series of functions, 
    each taking one argument at a time.

    NOTE : Function Currying is a type of Higher-Order Function.
    Because:
    It returns another function — and that's exactly what a higher-order function does.
<=======

=======>
Recursion
    Recursion is when a function calls itself to solve a smaller piece of a bigger problem.

    It keeps calling itself until it reaches a base condition that stops the calls.

⚠️ Be Careful:
* Always include a base case to prevent infinite loops.
* Too many recursive calls can lead to stack overflow.

NOTE : 
Once it hits the base case, it starts returning the values back up the stack:
<=======

=======>
Pure Function
    A pure function is a function that:
    * Always returns the same output for the same input.
    * Doesn’t change anything outside itself (no side effects).
<=======

=======>
Impure Function
    A function is impure if it:
    * Modifies things outside itself (has side effects)
    * Returns different output for the same input

    NOTE : 
    Using console inside function is also a impure function, bcz console is a side effect
<=======

=======>
Anonymous Function
    An anonymous function is a function without a name.
    It's often used as a value—like passing to another function, assigning to a variable, etc.
<=======

=======>
IIFE (Immediately Invoked Function Expressions)
    An IIFE is a function that:
    * Defines itself
    * Immediately calls itself
    * It runs as soon as it’s defined — no need to call it separately!
<=======

=======>
call()
    The call() method lets you call a function and explicitly set the value of this inside that function.

    Used To borrow methods from one object and use them on another.
<=======