Variables are Containers for Storing Data
JavaScript Variables can be declared in 4 ways:

Automatically
Using var
Using let
Using const

* Automatically => x=10, y="devil"

NOTE : It is considered good programming practice to always declare variables before use.

=>>>>>>>
* var => var name="ajju", var number=20
    var in JavaScript is function-scoped, meaning it’s only visible within the function in which it is declared 
    — even if it's inside a block like if, for, or {}
<<<<<<<=

=>>>>>>>
* let => let name="Ajju", let number=20
    let in JavaScript is block-scoped, which means it is only accessible within the block {} where it's declared.
<<<<<<<=

=>>>>>>>
* const => const name="Ajju", const number=20
    const is a block-scoped variable declaration, similar to let.
    However, once a variable is declared with const, it cannot be reassigned.
    If the variable holds an object or array, the contents can still be modified, but the variable itself cannot be reassigned to a new value.
<<<<<<<=

NOTE : For var and let value can be reassignable

=>>>>>>>
Premitive DataTypes
    Type      | Example               | Description
    String    | "Hello"               | Textual data
    Number    | 42, 3.14, -7          | Integer or floating-point numbers
    Boolean   | true, false           | Logical values
    Undefined | let x;                | Declared but not assigned a value
    Null      | let x = null;         | Represents "no value"
    BigInt    | 12345678901234567890n | For very large integers
    Symbol    | Symbol('id')          | Unique and immutable values

NOTE : Primitive Data types are immutable and it tends to "Call by Value"
<<<<<<<=

=>>>>>>>
Non Premitive DataTypes
Object
Array
Function ==> In js function is also a object
Date

NOTE : Non Primitive Data types are mutable and it tends to "Call by Reference"
<<<<<<<=

=>>>>>>>
Type Conversion
Converting Strings to Numbers
Converting Numbers to Strings
Converting Dates to Numbers
Converting Dates to String
Converting Booleans to Numbers
Converting Booleans to Strings

to convert any data type to number use =>Number(value/variable)
to convert any data type to String use =>String(value/variable) || (value/variable).toString()
<<<<<<<=

=>>>>>>>
Type Coercion
    Type Coercion is the process where JavaScript automatically converts one data type to another
    when performing operations involving mixed types.

IMPPPP
    except "+" operator all other [-,*,/,%,**] converts strings into numbers and do arithmatic operations

    Falsy values [0, "", null, undefined, NaN, false], except all others are truthy values
    Truthy values [any number, any string, {}, [],true]
<<<<<<<=

=>>>>>>>
Global scope
    Variables declared Globally (outside any function) have Global Scope.
    Global variables can be accessed from anywhere in a JavaScript program.
    Variables declared with var, let and const are quite similar when declared outside a block.

    NOTE : If you assign a value to a variable that has not been declared, it will automatically become a 
            GLOBAL variable.
        EX : 
        carname="BMW";
<<<<<<<=

=>>>>>>>
Local Scope (Function Scope)
    Local variables have Function Scope:
        They can only be accessed from within the function.
    Variables declared with var, let and const are quite similar when declared inside a function.
<<<<<<<=

=>>>>>>>
Block Scope 
    Created by { ... } like inside if, for, or just curly braces.
    Variables declared with **let** or **const** inside a block are only accessible inside that block.
    Not available outside.

    NOTE : var cannot support in this

    Feature         | Block Scope                        | Function (Local) Scope
    Created by      | Any {} block (e.g., if, for, etc.) | Function body function () {}
    Applies to      | let, const                         | var, let, const
    var supported?  | ❌ No (var is function-scoped)     | ✅ Yes
    Access outside? | ❌ No                              | ❌ No
<<<<<<<=

=>>>>>>>
Hoisting
     Hoisting is JavaScript's behavior of moving variable and function declarations to the top of
     their scope before code execution  

     // What gets hoisted?
     Declaration Type     | Hoisted? | Value after hoisting
     var                  | ✅ Yes   | undefined
     let / const          | ✅ Yes   | ❌ Hoisted, but not usable (TDZ)
     Function expression  | ❌ No    | ❌ Not hoisted as function
     Function declaration | ✅ Yes   | ✅ Usable before definition
<<<<<<<=

=>>>>>>>
Closures
     A closure is a nested (inner) function that has access to the outer function’s variables, even after the
     outer function has finished executing.
<<<<<<<=

=>>>>>>>
Temporal Dead Zone
    The Temporal Dead Zone is the time between when a variable is hoisted and when it is initialized.
    During this period, accessing the variable will throw a ReferenceError.

    Applies to:
    ✅ let
    ✅ const
    ❌ "var" is not affected by TDZ — it's hoisted and initialized with "undefined".
<<<<<<<=

=>>>>>>>
this
    "this" refers to the object that is executing the current function

<<<<<<<=

=>>>>>>>
Shadowing
    Variable Shadowing in JavaScript occurs when the inner variable hides or overrides the outer variable 
    within the local scope. In this situation, the outer variable cannot be accessed within the inner scope, 
    only the inner variable is used in that scope.

    * Variable Shadowing occurs when we declare the same name for the variable in the inner and outer scope.
    * The inner variable will hide or override the outer variable.
    * The outer variable will become inaccessible until the code exists in the inner scope.
<<<<<<<=

=>>>>>>>
Lexical scope
    Lexical Scope means that a variable's scope is determined by its position in the source code 
    — i.e., where it’s written.
                or
    JavaScript functions are lexically scoped, meaning they remember the scope in which they were written, 
    not where they are called.
    (ಜಾವಾಸ್ಕ್ರಿಪ್ಟ್ ಫಂಕ್ಷನ್‌ಗಳನ್ನು ಲೆಕ್ಸಿಕಲ್ ಆಗಿ ಸ್ಕೋಪ್ ಮಾಡಲಾಗುತ್ತದೆ, ಅಂದರೆ ಅವು ಅವುಗಳನ್ನು ಎಲ್ಲಿ ಕರೆಯಲಾಗುತ್ತದೆ 
    ಎಂಬುದರ ಬದಲು ಅವುಗಳನ್ನು ಬರೆಯಲಾದ ವ್ಯಾಪ್ತಿಯನ್ನು ನೆನಪಿಸಿಕೊಳ್ಳುತ್ತವೆ.)
<<<<<<<=

=>>>>>>>
Strict Mode ("use strict")
    "use strict" is a special mode in JavaScript that helps you write safer and cleaner code by 
    catching common mistakes.

    "use strict";  // should be used in the top (means in first line)
    x = 10;  // ❌ ReferenceError: x is not defined (need to initialized with let,const or var)
<<<<<<<=



