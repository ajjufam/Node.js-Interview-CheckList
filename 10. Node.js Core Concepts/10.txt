=======>
a1.
Global Objects
    Global Objects in Node.js are objects available in every module. You don't need to require them â€” 
    they are automatically available.

    Why?
    * Help you access useful values or functions anywhere in your code.
    * Reduce the need for importing common utilities.
    * Offer system-level functionalities like current directory, timers, buffer handling, etc.
<=======

=======>
a2.
CommonJS Modules
    CommonJS (CJS) is the module system used in Node.js.
    It allows you to import and export code between files.

    Why?
    * Helps split code into reusable parts.
    * Keeps code organized and maintainable.
    * Built-in support in Node.js (no setup needed).
<=======

=======>
a3.
ES Modules
    ES Modules (ESM) is the official JavaScript module system introduced in ES6 (2015).
    It's used in both browser and Node.js (modern versions).

    Why?
    * Native JavaScript module system.
    * Supports asynchronous loading.
    * Works in browsers and Node.js.
    * Supports tree-shaking (removing unused code).
<=======

=======>
a4.
REPL
<=======

=======>
a5.
NPM
<=======

=======>
a6.
Environment Variables
<=======

=======>
a7.
fs module
<=======

=======>
a8.
path module
<=======

=======>
a9.
events module
<=======

=======>
b1.
streams
<=======

=======>
b2.
buffers
<=======

=======>
b3.
http module
<=======

=======>
b4.
os module
<=======

=======>
b5.
child_process
<=======

=======>
b6.
cluster
<=======

=======>
b7.
process.exit()
<=======

=======>
b8.
process.argv
<=======

=======>
b9.
process.memoryUsage()
<=======

=======>
c1.
Manual Middleware
<=======

=======>
c2.
Error Handling
<=======

=======>
c3.
REST APIs
<=======