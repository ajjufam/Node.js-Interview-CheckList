=======>
a1.
Setup Express App
    Express is a minimal and flexible Node.js web application framework that provides a robust set of features to 
    build web and mobile applications. It simplifies handling HTTP requests, routing, middleware, and server-side logic.

    Why ?
    * Simplifies server creation — you don’t have to work with the raw Node.js HTTP module.
    * Routing made easy — organize your endpoints with clean and readable code.
    * Middleware support — easily add functionality like logging, authentication, error handling.
    * Extensible — integrates with many template engines, databases, and other Node.js libraries.
    * Lightweight and fast — minimal overhead, giving you control and performance.
<=======

=======>
a2.
Routing (GET, POST, PUT, DELETE)
    Routing is the process of defining endpoints (URLs) in your server and deciding how your server responds to 
    client requests made to those endpoints. Each route handles a specific HTTP method and URL path.

    why ?
    * To organize your app so different URLs and HTTP methods trigger specific logic.
    * To handle client requests properly (fetch data, send data, update or delete data).
    * To build RESTful APIs which use these methods to manage resources.

    HTTP Methods
    | Method | Purpose              | Example use case                   |
    | ------ | -------------------- | ---------------------------------- |
    | GET    | Retrieve data        | Get user details                   |
    | POST   | Create new data      | Submit a new form or create a user |
    | PUT    | Update existing data | Update user profile info           |
    | DELETE | Remove data          | Delete a user or a resource        |

    How ?
    You use Express app methods that correspond to HTTP methods:
    * app.get(path, handler)
    * app.post(path, handler)
    * app.put(path, handler)
    * app.delete(path, handler)
<=======

=======>
a3.
Middleware
    Middleware is a function that sits between the request and response cycle in Express. It has access to the request 
    (req), response (res), and the next middleware function (next) in the pipeline.

    Middleware functions can:
    * Execute any code
    * Make changes to the request or response objects
    * End the request-response cycle
    * Call the next middleware in the stack

    Why ?
    * To modularize and reuse code across routes
    * To handle common tasks like parsing request bodies, authentication, logging, error handling, etc.
    * To control request flow (allow or block requests based on conditions)
    * To inject functionality into the request pipeline easily

    Types of Middleware
    * Application-level middleware
      Applied globally or to specific routes on the Express app.

    * Router-level middleware
      Applied only on specific Express routers.

    * Built-in middleware
      Comes with Express, e.g., express.json(), express.static().

    * Third-party middleware
      Like morgan (logging), cors (Cross-Origin Resource Sharing), helmet (security).
<=======

=======>
a4.
Router
    A Router in Express is a mini, modular subset of the main app that can handle its own routes and middleware. 
    It lets you organize your application’s routes into smaller, manageable pieces instead of cluttering everything 
    in one big file.

    Why ?
    * To organize routes logically by feature or resource (e.g., users, products, orders).
    * To keep code modular and maintainable.
    * To apply middleware only to specific groups of routes.
    * To reuse and mount route handlers in different parts of your app.

    How to Use 
    * Create a router object with express.Router().
    * Define routes on this router.
    * Export the router if in a separate file.
    * Mount the router in your main app using app.use().
<=======

=======>
a5.
req & res objects
<=======

=======>
a6.
Sending JSON/HTML
<=======

=======>
a7.
Error Middleware
<=======

=======>
a8.
Route Params & Query
<=======

=======>
a9.
Static Files
<=======

=======>
b1.
CORS
<=======

=======>
b2.
HTTP Status Codes
<=======

=======>
b3.
Body Parsing
<=======

=======>
b4.
File Upload (e.g., multer)
<=======

=======>
b5.
JWT Authentication
<=======

=======>
b6.
Input Validation
<=======
