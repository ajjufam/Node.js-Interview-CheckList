=======>
a1.
Setup Express App
    Express is a minimal and flexible Node.js web application framework that provides a robust set of features to 
    build web and mobile applications. It simplifies handling HTTP requests, routing, middleware, and server-side logic.

    Why ?
    * Simplifies server creation â€” you donâ€™t have to work with the raw Node.js HTTP module.
    * Routing made easy â€” organize your endpoints with clean and readable code.
    * Middleware support â€” easily add functionality like logging, authentication, error handling.
    * Extensible â€” integrates with many template engines, databases, and other Node.js libraries.
    * Lightweight and fast â€” minimal overhead, giving you control and performance.
<=======

=======>
a2.
Routing (GET, POST, PUT, DELETE)
    Routing is the process of defining endpoints (URLs) in your server and deciding how your server responds to 
    client requests made to those endpoints. Each route handles a specific HTTP method and URL path.

    why ?
    * To organize your app so different URLs and HTTP methods trigger specific logic.
    * To handle client requests properly (fetch data, send data, update or delete data).
    * To build RESTful APIs which use these methods to manage resources.

    HTTP Methods
    | Method | Purpose              | Example use case                   |
    | ------ | -------------------- | ---------------------------------- |
    | GET    | Retrieve data        | Get user details                   |
    | POST   | Create new data      | Submit a new form or create a user |
    | PUT    | Update existing data | Update user profile info           |
    | DELETE | Remove data          | Delete a user or a resource        |

    How ?
    You use Express app methods that correspond to HTTP methods:
    * app.get(path, handler)
    * app.post(path, handler)
    * app.put(path, handler)
    * app.delete(path, handler)
<=======

=======>
a3.
Middleware
    Middleware is a function that sits between the request and response cycle in Express. It has access to the request 
    (req), response (res), and the next middleware function (next) in the pipeline.

    Middleware functions can:
    * Execute any code
    * Make changes to the request or response objects
    * End the request-response cycle
    * Call the next middleware in the stack

    Why ?
    * To modularize and reuse code across routes
    * To handle common tasks like parsing request bodies, authentication, logging, error handling, etc.
    * To control request flow (allow or block requests based on conditions)
    * To inject functionality into the request pipeline easily

    Types of Middleware
    * Application-level middleware
      Applied globally or to specific routes on the Express app.

    * Router-level middleware
      Applied only on specific Express routers.

    * Built-in middleware
      Comes with Express, e.g., express.json(), express.static().

    * Third-party middleware
      Like morgan (logging), cors (Cross-Origin Resource Sharing), helmet (security).
<=======

=======>
a4.
Router
    A Router in Express is a mini, modular subset of the main app that can handle its own routes and middleware. 
    It lets you organize your applicationâ€™s routes into smaller, manageable pieces instead of cluttering everything 
    in one big file.

    Why ?
    * To organize routes logically by feature or resource (e.g., users, products, orders).
    * To keep code modular and maintainable.
    * To apply middleware only to specific groups of routes.
    * To reuse and mount route handlers in different parts of your app.

    How to Use
    * Create a router object with express.Router().
    * Define routes on this router.
    * Export the router if in a separate file.
    * Mount the router in your main app using app.use().
<=======

=======>
a5.
req & res objects
    * req stands for request object â€” it represents the HTTP request from the client.
    * res stands for response object â€” it is used to send back the HTTP response to the client.
    They are the two core objects you work with inside every route handler or middleware.

    What does req contain?
    The req object holds information about the clientâ€™s request, such as:
    * req.params â€” route parameters (e.g., /users/:id â†’ req.params.id)
    * req.query â€” query string parameters (e.g., /search?q=term â†’ req.query.q)
    * req.body â€” data sent in the body of POST/PUT requests (requires body parser middleware)
    * req.headers â€” HTTP headers sent by the client
    * req.method â€” HTTP method (GET, POST, etc.)
    * req.url â€” the full URL requested

    What can you do with res?
    The res object lets you craft and send the response:
    * res.send() â€” send a response (string, buffer, JSON, etc.)
    * res.json() â€” send a JSON response (sets content-type automatically)
    * res.status(code) â€” set the HTTP status code (e.g., 200, 404, 500)
    * res.redirect(url) â€” redirect the client to another URL
    * res.render() â€” render a template view (if using a view engine)
    * res.set() â€” set response headers
<=======

=======>
a6.
Sending JSON/HTML
    âœ… Sending JSON in Express
    You send JSON when you want to respond with structured data (like an object or array). It's commonly used in APIs.

    How ?
    Use res.json() â€” it sets the Content-Type header to application/json automatically.

    âœ… Sending HTML in Express
    You send HTML when you're returning a complete web page (static or dynamically generated).

    How ?
    Use res.send() to send raw HTML content.
<=======

=======>
a7.
Error Middleware
    Error middleware in Express is a special type of middleware designed to catch and handle errors in one central place. 
    Instead of writing error handling logic inside each route, you can offload it to a dedicated function.

    Why ?
    * To centralize error handling logic
    * To log, format, and respond to errors consistently
    * To improve code maintainability and debugging

    How ?
    It must have four arguments:
    (err, req, res, next)

    Express knows it's an error handler because of these four parameters.
=======

=======>
a8.
Route Params & Query
    âœ… Route Parameters (req.params)
    Route parameters are named URL segments used to capture values from the URL.

    Why ?
    To identify resources â€” like a specific user, product, or order.

    âœ… Query Parameters (req.query)
    Query parameters are key-value pairs in the URL after the ?.

    Why ?
    To filter, sort, paginate, or search data without changing the route path.
<=======

=======>
a9.
Static Files
    Static files are files that donâ€™t change and are served as-is to the browser.
    These include:
    * HTML files
    * CSS stylesheets
    * JavaScript files
    * Images (PNG, JPG, SVG)
    * Fonts, PDFs, etc.

    Why ?
    * To show web pages and assets to users
    * Required for frontend of most web apps
    * Speeds up performance since they don't require server-side rendering
<=======

=======>
b1.
CORS
    CORS stands for Cross-Origin Resource Sharing.
    Itâ€™s a browser security feature that controls which domains can access your backend APIs.

    Why ?
    By default, browsers block frontend JS code from calling a different domain (cross-origin).
    You need CORS to allow or restrict access to your serverâ€™s APIs from other domains.
    ðŸ§  Example:
    * Frontend: http://localhost:3000
    * Backend API: http://localhost:5000
    Without enabling CORS on your backend, this request will fail in the browser.
<=======

=======>
b2.
HTTP Status Codes
<=======

=======>
b3.
Body Parsing
<=======

=======>
b4.
File Upload (e.g., multer)
<=======

=======>
b5.
JWT Authentication
<=======

=======>
b6.
Input Validation
<=======
