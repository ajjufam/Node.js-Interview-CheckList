=======>
DB Connection
    const mongoose = require("mongoose");
    const mongouri = process.env.MONGODB_URI;

    const connectDB = () => {
    mongoose
        .connect(mongouri)
        .then(() => console.log(`Mongoose connected successfully`))
        .catch((err) => console.log(`Error while connecting to mongo`, err));
    };

    module.exports = connectDB;

a1.
Create Document
    In MongoDB, creating a document means inserting a new JSON-like object into a collection in a database.
    {
        "_id": ObjectId("..."),
        "name": "John",
        "email": "john@example.com"
    }

    Why ?
    You create documents to:
    * Store application data (users, orders, products, etc.)
    * Maintain schema-flexible records
    * Add entries to your collection
    * Build APIs that rely on persistent storage
<=======

=======>
a2.
Read Document
    Reading means querying or retrieving documents from a MongoDB collection.
    This can be:
    * One document â†’ findOne(), findById()
    * Many documents â†’ find(), with filters, projections, sorting, etc.

    why ?
    To:
    * Show user data in dashboards
    * Authenticate users
    * List orders/products
    * Check status, verify inputs
    * Populate dropdowns or relations
    In short: any time we fetch data from DB, we use read queries.
<=======

=======>
a3.
Update Document
    Updating a document means modifying one or more fields in an existing MongoDB record 
    (document) based on a condition â€” typically by _id.

    Why ?
    You use it when:
        * A user updates their profile (name, age, etc.)
        * Admin changes user role or status
        * A productâ€™s price is updated
        * A booking status is changed from pending â†’ confirmed

    You donâ€™t want to delete or recreate the record â€” just update it.
    ðŸ”§ Methods to update (via Mongoose):
        * findByIdAndUpdate
        * updateOne
        * updateMany
        * findOneAndUpdate
        * Document.save()
<=======

=======>
a4.
Delete Document
    Deleting a document means permanently removing a record from your MongoDB collection.
    Mongoose gives you several ways to delete:
        * deleteOne()
        * deleteMany()
        * findByIdAndDelete()
        * findOneAndDelete()
    Thereâ€™s also the soft delete pattern (where you just mark deleted: true).

    Why ?
    In real-world apps, we delete documents when:
        * A user deletes their account
        * Admin removes a product or post
        * An expired session/token is removed
        * An order is canceled and should not appear anymore
    Note: Sometimes, we soft delete instead of hard delete â€” more on that below.
<=======

=======>
a5.
Schema Design
    Schema Design is the process of defining the structure of your documents in a MongoDB collection using fields, 
    types, relationships, constraints, and indexes.
    In Mongoose (Node.js), you define schemas using new mongoose.Schema(), then create models based on that schema.

    Why ?
    * Ensures data consistency (type-safe: name = string, age = number)
    * Controls validation (required, unique, enums, etc.)
    * Improves query performance (via indexing and structure)
    * Supports complex/nested relationships
    * Makes your codebase maintainable and scalable
<=======

=======>
a6.
ObjectId
<=======

=======>
a7.
Indexing
<=======

=======>
a8.
Aggregation
<=======

=======>
a9.
Mongoose ODM
<=======

=======>
b1.
Mongoose Validation
<=======

=======>
b2.
Mongoose Connection
<=======

=======>
b3.
Population (populate)
<=======