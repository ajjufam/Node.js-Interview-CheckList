| Stage          | Purpose                       | Key Use Case Example                     |
| -------------- | ----------------------------- | ---------------------------------------- |
| `$match`       | Filter docs                   | Get students from CS dept                |
| `$project`     | Shape output fields           | Show name + avg score                    |
| `$unwind`      | Flatten arrays                | Split scores into separate docs          |
| `$group`       | Aggregate by field            | Count students by department             |
| `$sort`        | Sort docs                     | Sort by age or avg score                 |
| `$limit`       | Limit results                 | Top 3 scorers                            |
| `$skip`        | Skip docs                     | Pagination                               |
| `$addFields`   | Add computed fields           | Add avg score                            |
| `$lookup`      | Join collections              | Add faculty info from `departments`      |
| `$count`       | Count docs                    | Total student count                      |
| `$out`         | Save output                   | Save to another collection               |
| `$facet`       | Multi-result aggregation      | Group + stats at once                    |
| `$bucket`      | Range grouping                | Group students by age range              |
| `$replaceRoot` | Change doc structure          | Flatten embedded fields                  |
| `$merge`       | Update/insert into collection | Write processed docs to final collection |

=======>
1.
$match
    $match is the filtering stage of the MongoDB aggregation pipeline.
    It works like a WHERE clause in SQL, allowing you to filter documents based on specific conditions before 
    other aggregation stages run.

    Why ?
    * To narrow down data early in the pipeline for performance.
    * To pre-filter documents before grouping, sorting, or transforming them.
    * Helps reduce data volume for subsequent stages (like $group, $project).

    Student.aggregate([...]): Starts the aggregation pipeline on the Student collection.

    [ { $match: { department: "CS" } } ]:

    This is the first stage of the pipeline.
    $match filters documents where the department field is "CS".
    So, only students who belong to the "CS" (Computer Science) department will be passed to the next stage (if any).

    | Feature          | Description                                                   |
    | ---------------- | ------------------------------------------------------------- |
    | Acts like        | SQL `WHERE`                                                   |
    | Purpose          | Filter documents                                              |
    | Input            | All documents in the collection                               |
    | Output           | Only documents matching the condition                         |
    | Common use cases | Used before `$group`, `$sort`, `$project` to reduce data size |
<=======

=======>
2.
$project
    $project is used to specify which fields to include, exclude, or compute in the output.
    It acts like a "SELECT" clause in SQL, but with the ability to calculate new fields using expressions 
    (e.g., $avg, $sum, etc.).
    You can also rename, remove, or modify fields in this stage

    Student.aggregate([...]): Starts the aggregation pipeline on the Student collection.

    { $project: { name: 1, avgScore: { $avg: "$scores" } } }

    $project: This is the aggregation stage you're using.
    name: 1: This means include the name field in the output.
    avgScore: { $avg: "$scores" }: This creates a new computed field called avgScore, which calculates the average of 
    the scores array in each student document.

    | Purpose        | Description                                                      |
    | -------------- | ---------------------------------------------------------------- |
    | Select fields  | Include/exclude specific fields (e.g., `name: 1`)                |
    | Rename fields  | You can alias fields (e.g., `studentName: "$name"`)              |
    | Compute fields | Use expressions like `$avg`, `$sum`, `$concat`, etc.             |
    | Reshape docs   | Use it to return only what‚Äôs needed (great for APIs, dashboards) |
<=======

=======>
3.
$unwind
    $unwind is used to deconstruct an array field from the input documents.
    It creates a separate document for each element in the array.
    It‚Äôs like "flattening" the array ‚Äî making it easier to work with individual items 
    (e.g., for filtering, grouping, projecting, etc.).

    Student.aggregate([...]): Starts the aggregation pipeline on the Student collection.

    { $unwind: "$scores" } ..... (here scores should be an array)

    This will take each document where scores is an array and create a new document for each score in that array.

    | Use Case                        | Explanation                                          |
    | ------------------------------- | ---------------------------------------------------- |
    | Flatten array fields            | Turns array elements into separate documents         |
    | Prepares for `$group`, `$match` | Makes it easier to aggregate or filter inside arrays |
    | Works with other stages         | Can combine with `$group`, `$sort`, `$project`, etc. |
<=======

=======>
4.
$group
    $group stage of MongoDB Aggregation ‚Äî one of the most powerful stages, similar to GROUP BY in SQL.
    $group allows you to group documents by a field and then apply aggregation operations 
    (like $sum, $avg, $max, $min, etc.) to those groups.
    It's used for analytics, reporting, and dashboards directly within the database.

    Student.aggregate([...]): Starts the aggregation pipeline on the Student collection.

    {
      $group: {
        _id: "$department",
        avgAge: { $avg: "$age" },
        count: { $sum: 1 }
      }
    }
    | Field                      | Description                                                                                        |
    | -------------------------- | -------------------------------------------------------------------------------------------------- |
    | `_id: "$department"`       | Groups students **by department** (e.g., CS, EE, ME). The `_id` here represents the **group key**. |
    | `avgAge: { $avg: "$age" }` | Calculates the **average age** of students in each department.                                     |
    | `count: { $sum: 1 }`       | Counts the **number of students** in each department. (Each document adds `1` to the total.)       |

    | Use Case               | Description                                                 |
    | ---------------------- | ----------------------------------------------------------- |
    | Grouping data          | Similar to SQL `GROUP BY`                                   |
    | Aggregate calculations | `$sum`, `$avg`, `$max`, `$min`, `$push`, etc.               |
    | Useful for analytics   | Example: total students per department, average score, etc. |

<=======

=======>
5.
$sort
    The $sort stage in MongoDB is used to order the documents in the aggregation pipeline based on specified fields ‚Äî similar to ORDER BY in SQL.

    Student.aggregate([...]): Runs an aggregation pipeline on the Student collection.

    { $sort: { age: -1 } }
    
    This stage sorts all students by age in descending order (from oldest to youngest).
    -1: Descending order.
    1: Would mean ascending order (youngest to oldest).

    | Use Case                       | Description                                                          |
    | ------------------------------ | -------------------------------------------------------------------- |
    | Sorting by field               | Use `{ field: 1 }` for ascending, `{ field: -1 }` for descending     |
    | Sorting multiple fields        | `{ age: -1, name: 1 }` ‚Äì Sort by age descending, then name ascending |
    | Use after `$match` or `$group` | Can sort results of filtered or grouped data                         |
<=======

=======>
6.
$limit
    The $limit stage restricts the number of documents that pass through the aggregation pipeline.
    It‚Äôs similar to SQL‚Äôs LIMIT clause ‚Äî it cuts off the result after a certain number of documents.

    Student.aggregate([...]): Begins an aggregation pipeline on the Student collection.

    { $limit: 1 }
    Only one document will be allowed through the pipeline ‚Äî the first one encountered.

    üí° Note: If you don't use a $sort before this, the "first" document is not guaranteed to be in any specific order 
    ‚Äî it's based on how MongoDB internally stores documents.

    | Use Case        | Description                                                 |
    | --------------- | ----------------------------------------------------------- |
    | Pagination      | Combine `$skip` and `$limit` to paginate results            |
    | Sampling        | If you just want N results quickly (e.g., 5 examples)       |
    | Trimming output | Reduce the number of results for dashboard or summary views |
<=======

=======>
7.
$skip
    The $skip stage tells MongoDB to ignore a specified number of documents from the beginning of the pipeline result 
    and pass along the rest.
    It's similar to OFFSET in SQL.

    Student.aggregate([...]): Starts an aggregation pipeline on the Student collection.

    { $skip: 1 }
    This tells MongoDB to skip the first document and return the rest.

    üí° Important: Without a $sort before $skip, the ‚Äúfirst‚Äù document skipped is not guaranteed to be the same every time 
    ‚Äî it depends on MongoDB‚Äôs internal ordering.

    | Use Case          | Description                                          |
    | ----------------- | ---------------------------------------------------- |
    | Pagination        | Used with `$limit` to fetch the next page of data    |
    | Offsetting data   | Ignore the first N entries for sampling or filtering |
    | Efficient slicing | Skip documents before applying further processing    |
<=======

=======>
8.
$addFields
    The $addFields stage adds new fields or updates existing ones to documents that are passing through the aggregation pipeline.
    It does not remove existing fields.
    It‚Äôs often used to compute and attach calculated values to the documents.

    Student.aggregate([...]): Runs an aggregation pipeline on the Student collection.

    { $addFields: { avgScore: { $avg: "$scores" } } }
    Adds a new field called avgScore to each student document.

    $avg: "$scores" calculates the average of the array in the scores field.
    This value is assigned to the new avgScore field.

    üß© Use Cases for $addFields
    | Use Case           | Example                                 |
    | ------------------ | --------------------------------------- |
    | Calculated fields  | Compute average, sum, derived values    |
    | Conditional values | Use `$cond` or `$ifNull` to add logic   |
    | Data enrichment    | Add additional properties for reporting |

    ‚úÖ Comparison: $addFields vs $project
    | `$addFields`              | `$project`                        |
    | ------------------------- | --------------------------------- |
    | Adds or updates fields    | Includes/excludes specific fields |
    | Keeps all original fields | Can hide/remove fields            |
    | Use to **enrich** data    | Use to **reshape** data           |
<=======

=======>
9.
$lookup
    $lookup is used in MongoDB aggregation to perform a join between two collections, similar to a SQL JOIN.
    It lets you:
    Pull in related data from another collection.
    Combine multiple documents into one.
    Create nested/embedded structures for reports or APIs

    Student.aggregate([...]): Runs an aggregation pipeline on the Student collection.

    {
      $lookup: {
        from: "departments",              // the name of the other collection
        localField: "department",         // field in the Student collection
        foreignField: "_id",              // field in the departments collection
        as: "deptInfo",                   // result will be stored in a new array field 'deptInfo'
      },
    },

    For each student document, MongoDB:
    Takes the value of department (like "CS")
    Looks into the departments collection for documents where _id === "CS"
    If a match is found, it returns the matching department documents as an array in a new field called deptInfo

    | Use Case                            | Description                                                  |
    | ----------------------------------- | ------------------------------------------------------------ |
    | Join `orders` with `customers`      | Combine order details with customer info                     |
    | Enrich `products` with `categories` | Attach category names to product listings                    |
    | Join `students` with `departments`  | Like in your case: attach department details to each student |

    ‚úÖ Tips
    The "from" collection must exist in the same MongoDB database.
    The result of $lookup is always an array (deptInfo in this case), even if it finds only one match.
    You can use $unwind after $lookup if you want to flatten the joined result.
<=======

=======>
10.
$count
    $count is a terminal stage in the aggregation pipeline that:
    * Counts the number of documents passing through the pipeline
    * Returns a single document like: { "totalStudents": <number> }
    * It must be the last stage (or close to last, if used properly)

    Student.aggregate([...]): Starts an aggregation query on the Student collection.
    
    { $count: "totalStudents" }:
    Tells MongoDB: "Count how many documents made it through the pipeline"

    The output document will have a key totalStudents (you can name it anything).

    üß† Tip
    If you only want the count and don‚Äôt need other stages, $count is more efficient than fetching all documents and 
    calling .length.
<=======

=======>
11.
$out
    $out is a terminal aggregation stage used to write the results of the aggregation pipeline to a collection.
    * If the collection exists, it overwrites it (replaces all documents).
    * If it doesn‚Äôt exist, MongoDB creates the collection.
    * Unlike other stages, $out doesn‚Äôt return results to the caller ‚Äî it writes directly to the database.

    Student.aggregate([...]): Starts an aggregation query on the Student collection.

    { $project: { name: 1, avgScores: { $avg: "$scores" } } },
    { $out: "avg_scores" },

    üîç Stage 1: $project
    { $project: { name: 1, avgScores: { $avg: "$scores" } } }
    Reshapes each student document:
    * Includes name
    * Computes avgScores by averaging values in the scores array

    üîç Stage 2: $out
    { $out: "avg_scores" }
    * Writes all output documents (from the previous stages) to a new collection named avg_scores
    * If avg_scores already exists, it is dropped and replaced
    * This is useful for materializing reports, caching heavy computations, or exporting views

    NOTE :
    * $out doesn't return a result ‚Äî so this will usually log undefined or an empty array.
    * The real result is stored in the avg_scores collection(IN DB).

    ‚úÖ Use Cases for $out
    * Exporting processed data to a different collection
    * Precomputing and storing aggregations (e.g., dashboard metrics)
    * Materialized views for frequent reads

    ‚ö†Ô∏è Important Notes
    * $out replaces the collection ‚Äî not append or merge
    * You cannot use $out in Atlas shared-tier clusters (M0, M2, M5) ‚Äî only in dedicated clusters
    * $merge is a safer alternative if you want to update or insert without replacing the whole collection
<=======

=======>
12.
$facet
    $facet is used to run multiple aggregation pipelines in parallel within a single query.
    Each sub-pipeline runs independently on the same input set of documents, and the results are returned together 
    in one combined document.
    It‚Äôs like running multiple aggregations side by side, and getting all results in one response.

    ‚úÖ Use Case
    When you want to:
    * Perform multiple grouped summaries (e.g., by department, age stats)
    * Get different views of the same data in one roundtrip
    * Avoid running multiple aggregate queries from your app

    Student.aggregate([...]): Starts an aggregation query on the Student collection.

    {
      $facet: {
        byDept: [{ $group: { _id: "$department", count: { $sum: 1 } } }],
        ageStats: [
          {
            $group: { _id: null, avg: { $avg: "$age" }, max: { $max: "$age" } },
          },
        ],
      },
    },

    $facet, tarts an aggregation pipeline with $facet, which lets you run multiple mini-pipelines in parallel.
    
    byDept is the first pipeline.
    It groups students by their department and counts the number of students per department.

    ageStats is the second pipeline.
    It computes statistics on the age field:
    avg: average age of all students
    max: oldest student

    console.dir(result, { depth: null }); // NOTE (How to console)   ???IPMMMM
<=======

=======>
13.
$bucket
    $bucket groups documents into buckets (ranges) based on a field (like age).
    Each document is placed in the first bucket whose boundary it falls into.
    It‚Äôs similar to a SQL GROUP BY on range values.

    const result = await Student.aggregate([
        {
            $bucket: {
            groupBy: "$age",
            boundaries: [20, 22, 24, 26],
            default: "Others",
            output: { count: { $sum: 1 } },
            },
        },
    ]);

     Breakdown of $bucket:
    * groupBy: "$age"
      ‚Üí You're bucketing students based on their age.

    * boundaries: [20, 22, 24, 26]
      ‚Üí Defines the bucket ranges:
      | Bucket Range  | Includes ages |
      | ------------- | ------------- |
      | 20 ‚â§ age < 22 | 20, 21        |
      | 22 ‚â§ age < 24 | 22, 23        |
      | 24 ‚â§ age < 26 | 24, 25        |

    * default: "Others"
      ‚Üí Any age not in the defined boundaries (e.g. 19 or 26+) goes to the "Others" bucket.

    * output: { count: { $sum: 1 } }
      ‚Üí Each bucket shows the count of documents it received.

    üÜö $bucket vs $bucketAuto
    * $bucket: You define the bucket boundaries manually.
    * $bucketAuto: MongoDB automatically creates evenly distributed buckets based on data.
<=======

=======>
14.
$replaceRoot
    $replaceRoot replaces the entire document with a new specified document, usually to reshape or flatten the 
    document structure.

    const result = await Student.aggregate([
      {
        $replaceRoot: {
          newRoot: {
            name: "$name",
            scoreList: "$scores",
          },
        },
      },
    ]);

    üîç Explanation:
    * newRoot: Defines the new shape of each document.
    * { name: "$name", scoreList: "$scores" }: You're creating a new root document that:
        * Keeps the name field as-is
        * Renames scores to scoreList
    
    ‚úÖ Use Cases for $replaceRoot:
    * Reshape deeply nested structures
    * Remove unwanted fields entirely
    * Prepare data for specific output format (e.g., for APIs)

    ‚ö†Ô∏è Gotchas
    * You must provide a valid document structure in newRoot
    * If any field in newRoot is undefined, it won‚Äôt appear
<=======

=======>
15.
$merge
    $merge is an aggregation stage that writes the results of the aggregation pipeline to a specified collection. 
    It's like an "upsert" (update if exists, insert if not) for aggregation output.
    It allows you to:
    * Insert new documents into the target collection
    * Update existing documents in the target collection based on matching criteria
    * Replace existing documents if needed
    * Control behavior when documents match or don't match

    const result = await Student.aggregate([
      {
        $merge: {
          into: "final_students",
          whenMatched: "merge",
          whenNotMatched: "insert",
        },
      },
    ]);

    üîç Explanation of $merge options:
    * into: "final_students"
    Specifies the target collection where the aggregation output will be merged.

    * whenMatched: "merge"
    When a document with the same _id exists in the target collection, it merges the fields from the aggregation 
    result into the existing document (like an update that merges fields).

    * whenNotMatched: "insert"
    When a document from the aggregation result does not exist in the target collection, it inserts the document 
    as a new record.

    ‚úÖ When to use $merge?
    * To save aggregation results back into the database
    * To create materialized views or summary tables
    * To update or sync documents in another collection based on aggregation
    * To implement data pipelines inside MongoDB without needing extra code
<=======
