=======>
Callbacks
    A callback is a function passed as an argument to another function and is called later 
    (after some operation completes).

    Why ?
    * To handle asynchronous operations (like API calls, reading files).
    * To execute code in order ‚Äî like ‚Äúdo this, then do that‚Äù.
<=======

=======>
Callback Hell 
    Callback Hell is when multiple nested callbacks are used, making the code look like a "pyramid" or 
    "staircase", and it's hard to read, maintain, or debug.

    Why
    When you have to do tasks in sequence, and each task depends on the result of the previous one 
    ‚Äî especially in asynchronous code (like file reading, API requests, timers, etc).

    üîß How to fix it?
    You can avoid callback hell by using:
    Named functions (instead of nesting)
    Promises
    Async/Await (most modern and readable)
<=======

=======>
Promises
    Promises in Js is a eventual execution or failure of an asynchronous operation.

    Why ?
    * To avoid callback hell.
    * To write cleaner, more readable asynchronous code.
    * To handle success and failure easily using .then() and .catch().
<=======

=======>
Promise States (pending, fulfilled, rejected)
    State     | What It Means
    pending   | The initial state ‚Äî the promise is still processing.
    fulfilled | The operation completed successfully (resolved).
    rejected  | The operation failed (rejected with an error).
<=======

=======>
then()
    .then() is a method used with Promises to handle the result when the promise is fulfilled (successful).

    Why
    To perform some action after the async task completes successfully ‚Äî like getting API data, finishing a delay, etc.
<=======

=======>
catch()
    .catch() is a method used with Promises to handle errors or rejected promises.

    Why ?
    To safely handle errors that may happen during asynchronous operations ‚Äî like network failures, 
    bugs, or rejected promises.
<=======

=======>
finally()
    .finally() is a method that runs after a Promise is settled, no matter if it was resolved or rejected.

    Why ?
    To run cleanup code or final actions ‚Äî like hiding a loader, closing a connection, etc. ‚Äî 
    whether the operation succeeded or failed.
<=======
