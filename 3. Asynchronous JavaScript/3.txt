=======>
a1.
Callbacks
    A callback is a function passed as an argument to another function and is called later 
    (after some operation completes).

    Why ?
    * To handle asynchronous operations (like API calls, reading files).
    * To execute code in order ‚Äî like ‚Äúdo this, then do that‚Äù.
<=======

=======>
a2.
Callback Hell 
    Callback Hell is when multiple nested callbacks are used, making the code look like a "pyramid" or 
    "staircase", and it's hard to read, maintain, or debug.

    Why
    When you have to do tasks in sequence, and each task depends on the result of the previous one 
    ‚Äî especially in asynchronous code (like file reading, API requests, timers, etc).

    üîß How to fix it?
    You can avoid callback hell by using:
    Named functions (instead of nesting)
    Promises
    Async/Await (most modern and readable)
<=======

=======>
a3.
Promises
    Promises in Js is a eventual execution or failure of an asynchronous operation.

    Why ?
    * To avoid callback hell.
    * To write cleaner, more readable asynchronous code.
    * To handle success and failure easily using .then() and .catch().
<=======

=======>
a4.
Promise States (pending, fulfilled, rejected)
    State     | What It Means
    pending   | The initial state ‚Äî the promise is still processing.
    fulfilled | The operation completed successfully (resolved).
    rejected  | The operation failed (rejected with an error).
<=======

=======>
a5.
then()
    .then() is a method used with Promises to handle the result when the promise is fulfilled (successful).

    Why
    To perform some action after the async task completes successfully ‚Äî like getting API data, finishing a delay, etc.
<=======

=======>
a6.
catch()
    .catch() is a method used with Promises to handle errors or rejected promises.

    Why ?
    To safely handle errors that may happen during asynchronous operations ‚Äî like network failures, 
    bugs, or rejected promises.
<=======

=======>
a7.
finally()
    .finally() is a method that runs after a Promise is settled, no matter if it was resolved or rejected.

    Why ?
    To run cleanup code or final actions ‚Äî like hiding a loader, closing a connection, etc. ‚Äî 
    whether the operation succeeded or failed.
<=======

=======>
a8.
Promise Chaining
    Promise chaining is when you attach multiple .then() handlers one after another to handle 
    sequential asynchronous operations.

    Why 
    * Handle multiple async steps in order.
    * Avoid callback hell.
    * Keep code clean and readable.
<=======

=======>
a9.
async/await
    async/await is syntactic sugar over Promises.
    It lets you write asynchronous code in a synchronous style, making it easier to read and maintain.

    Why ?
    * Cleaner than .then() chains
    * Avoids callback hell
    * Makes async code easier to understand
<=======

=======>
b1.
Error Handling in async code
    Why ?
    Because async functions use Promises, and like any Promise, they can fail (get rejected).
    Without handling, errors can crash your app or leave you wondering what went wrong.

    How ?
    Use try...catch blocks inside async functions.
<=======

=======>
b2.
Promise.all
    Promise.all is a method that takes multiple promises and runs them in parallel.
    It waits for all of them to finish, and then gives you the results.

    Why ?
    To run many promises at the same time, and wait for all of them before continuing.

    VVVIMPPPPP
     It returns:
     ‚úÖ a single promise that resolves when all given promises resolve.
     ‚ùå if any promise fails (rejects), the whole Promise.all fails.
<=======

=======>
b3.
Promise.race
    Promise.race takes multiple promises and returns a single promise that settles as soon as the 
    first one settles (either resolves ‚úÖ or rejects ‚ùå).

    Why ?
    To get the result of whichever promise finishes first, useful for:
    Setting timeouts ‚è±Ô∏è
    Getting the fastest API response ‚ö°
<=======

=======>
b4.
Promise.allSettled
    Promise.allSettled() takes multiple promises and returns a single promise that resolves when all of 
    them have settled, meaning either resolved ‚úÖ or rejected ‚ùå.

    Why ?
    Use it when you want the outcome of every promise, regardless of whether it succeeded or failed.
<=======

=======>
b5.
Promise.any
    Promise.any() takes multiple promises and returns the first one that fulfills (resolves successfully).

    Why ?
    Use it when you want the result of the first successful promise ‚Äî and you're okay ignoring failures.
<=======

