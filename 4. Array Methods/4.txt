| Method         | Mutable | Immutable |
|----------------|---------|-----------|
| `forEach()`    |         | Yes        |
| `map()`        |         | Yes        |
| `filter()`     |         | Yes        |
| `reduce()`     |         | Yes        |
| `some()`       |         | Yes        |
| `every()`      |         | Yes        |
| `find()`       |         | Yes        |
| `findIndex()`  |         | Yes        |
| `includes()`   |         | Yes        |
| `indexOf()`    |         | Yes        |
| `lastIndexOf()`|         | Yes        |
| `push()`       | Yes     |            |
| `pop()`        | Yes     |            |
| `shift()`      | Yes     |            |
| `unshift()`    | Yes     |            |
| `concat()`     |         | Yes        |
| `slice()`      |         | Yes        |
| `splice()`     | Yes     |            |
| `flat()`       |         | Yes        |
| `flatMap()`    |         | Yes        |
| `reverse()`    | Yes     |            |
| `sort()`       | Yes     |            |
| `fill()`       | Yes     |            |
| `from()`       |         | Yes        |

🔁 Mutable Methods (change the original array):
✅ Immutable Methods (do not change the original array):

=======>
a1.
forEach()
    forEach() is an array method that executes a callback function once for each element in an array — in order.

    Why ?
    To iterate over an array and perform an action (like logging or modifying something externally) for each item.
<=======

=======>
a2.
map()
    map() creates a new array by applying a function to each element of the original array.

    Why ?
    To transform array elements without changing the original array.
<=======

=======>
a3.
filter()
    filter() creates a new array with only those elements that pass a condition (i.e., the callback returns true).

    Why ?
    To select specific elements from an array based on a condition, without changing the original array.
<=======

=======>
a4.
reduce()
    The reduce() method reduces an array to a single value by running a callback function on each element, 
    while carrying forward an accumulator.

    Why ?
    Use it when you want to accumulate or combine values in an array into:
    a single number (like sum or product),
    an object,
    or even another array.
<=======

=======>
a5.
some()
    The some() method in JavaScript is used to check if at least one element in an array 
    satisfies a given condition.

    Why ?
    It is useful when you want to test if any item in the array meets a specific condition, without needing 
    to check every item or loop through the entire array manually.
<=======

=======>
a6.
every()
    The every() method in JavaScript checks if every element in an array satisfies a given condition.

    Why ?
    It is useful when you want to test if all items in the array meet a specific condition.
<=======

=======>
a7.
find()
    The find() method in JavaScript is used to find and return the first element in an array that satisfies 
    a given condition. If no element is found, it returns undefined.

    Why ?
    It is useful when you want to retrieve the first matching element based on a specific condition in the array.
<=======

=======>
a8.
findIndex()
    The findIndex() method in JavaScript is used to find the index of the first element in an array that satisfies a given condition.
    If no element satisfies the condition, it returns -1.

    Why ?
    It is useful when you need to know the index of the first element that meets a specific condition, rather than the element itself.
<=======

=======>
a9.
includes()
    The includes() method in JavaScript checks if an array contains a specific value. 
    It returns true if found, otherwise false.

    Why ?
    Use it when you simply want to check if a value exists in an array.
<=======

=======>
b1.
indexOf()
    The indexOf() method in JavaScript returns the index of the first occurrence of a specified value in an array. 
    If the value is not found, it returns -1.

    Why ?
    Use it to find where a specific value is located in an array.
<=======

=======>
b2.
lastIndexOf()
    The lastIndexOf() method in JavaScript returns the last occurrence's index of a specified 
    value in an array. If the value is not found, it returns -1

    Why ?
    Use it when you want to find the last position a value appears in an array.
<=======

=======>
b3.
push()
    The push() method in JavaScript adds one or more elements to the end of an array and returns 
    the new length of the array.

    Why ?
    Use it when you want to add items to the end of an array.
<=======

=======>
b4.
pop()
    The pop() method in JavaScript removes the last element from an array and returns 
    that removed element.

    Why ?
    Use it when you want to remove the last item from an array.
<=======

=======>
b5.
shift()
    The shift() method in JavaScript removes the first element from an array 
    and returns that removed element.

    Why ?
    Use it when you want to remove the first item of an array.
<=======

=======>
b6.
unshift()
    The unshift() method in JavaScript adds one or more elements to the beginning of an array 
    and returns the new length of the array.

    Why ?
    Use it when you want to add items to the start of an array.
<=======

=======>
b7.
concat()
    The concat() method in JavaScript is used to combine two or more arrays into a new array. 
    It does not change the original arrays.

    Why ?
    Use it when you want to merge arrays without modifying the originals.
<=======

=======>
b8.
slice()
    The slice() method in JavaScript is used to extract a portion of an array into a new array,
    without changing the original.

    Why ?
    Use it when you want to get a subarray (part of an array) without affecting the original one.
<=======

=======>
b9.
splice()
    The splice() method in JavaScript is used to add, remove, or replace elements in an array. 
    It modifies the original array.

    Why ?
    Use it when you need to insert, delete, or replace items directly in the array.
<=======

=======>
c1.
flat()
    The flat() method in JavaScript is used to flatten nested arrays into a single-level array.

    Why ?
    Use it when you want to remove nesting from arrays.
<=======

=======>
c2.
flatMap()
    The flatMap() method in JavaScript first maps each element using a function, 
    then flattens the result one level deep.

    Why ?
    Use it when you want to transform + flatten an array in one step.
<=======

=======>
c3.
reverse()
    The reverse() method in JavaScript reverses the order of elements in an 
    array in place (modifies the original array).

    Why ?
    Use it when you want to flip the order of items in an array.
<=======

=======>
c4.
sort()
    The sort() method in JavaScript sorts the elements of an array in place (modifies the original array) 
    and by default, sorts as strings.

    Why ?
    Use it to arrange items in order (like alphabetically or numerically).
<=======

=======>
c5.
fill()
    The fill() method in JavaScript fills all or part of an array with a static value. 
    It modifies the original array.

    Why ?
    Use it when you want to quickly initialize or overwrite array elements with the same value.
<=======

=======>
c6.
from()
    The Array.from() method in JavaScript creates a new array from:
    * array-like objects (like strings, NodeLists)
    * or iterables (like sets, maps)

    Why ?
    Use it when you want to convert something into an array or create an array with custom values.
<=======