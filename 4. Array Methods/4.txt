=======>
a1.
forEach()
    forEach() is an array method that executes a callback function once for each element in an array â€” in order.

    Why ?
    To iterate over an array and perform an action (like logging or modifying something externally) for each item.
<=======

=======>
a2.
map()
    map() creates a new array by applying a function to each element of the original array.

    Why ?
    To transform array elements without changing the original array.
<=======

=======>
a3.
filter()
    filter() creates a new array with only those elements that pass a condition (i.e., the callback returns true).

    Why ?
    To select specific elements from an array based on a condition, without changing the original array.
<=======

=======>
a4.
reduce()
    The reduce() method reduces an array to a single value by running a callback function on each element, 
    while carrying forward an accumulator.

    Why ?
    Use it when you want to accumulate or combine values in an array into:
    a single number (like sum or product),
    an object,
    or even another array.
<=======

=======>
a5.
some()
    The some() method in JavaScript is used to check if at least one element in an array 
    satisfies a given condition.

    Why ?
    It is useful when you want to test if any item in the array meets a specific condition, without needing 
    to check every item or loop through the entire array manually.
<=======

=======>
a6.
every()
    The every() method in JavaScript checks if every element in an array satisfies a given condition.

    Why ?
    It is useful when you want to test if all items in the array meet a specific condition.
<=======

=======>
a7.
find()
    The find() method in JavaScript is used to find and return the first element in an array that satisfies 
    a given condition. If no element is found, it returns undefined.

    Why ?
    It is useful when you want to retrieve the first matching element based on a specific condition in the array.
<=======

=======>
a8.
findIndex()
    The findIndex() method in JavaScript is used to find the index of the first element in an array that satisfies a given condition.
    If no element satisfies the condition, it returns -1.

    Why ?
    It is useful when you need to know the index of the first element that meets a specific condition, rather than the element itself.
<=======

=======>
a9.
includes()
    The includes() method in JavaScript checks if an array contains a specific value. 
    It returns true if found, otherwise false.

    Why ?
    Use it when you simply want to check if a value exists in an array.
<=======

=======>
b1.
indexOf()
    The indexOf() method in JavaScript returns the index of the first occurrence of a specified value in an array. 
    If the value is not found, it returns -1.

    Why ?
    Use it to find where a specific value is located in an array.
<=======

=======>
b2.
lastIndexOf()
    The lastIndexOf() method in JavaScript returns the last occurrence's index of a specified 
    value in an array. If the value is not found, it returns -1

    Why ?
    Use it when you want to find the last position a value appears in an array.
<=======

=======>
b3.
push()
    The push() method in JavaScript adds one or more elements to the end of an array and returns 
    the new length of the array.

    Why ?
    Use it when you want to add items to the end of an array.
<=======

=======>
b4.
pop()
    The pop() method in JavaScript removes the last element from an array and returns 
    that removed element.

    Why ?
    Use it when you want to remove the last item from an array.
<=======