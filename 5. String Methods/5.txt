=======>
a1.
length
    In JavaScript, .length on a string tells you how many characters are in that string.

    Why ?
    Use it when you want to know the size of a string.
<=======

=======>
a2.
indexOf()
    indexOf() finds the first occurrence of a value in a string or array and returns its index.
    If not found, it returns -1.

    Why ?
    Use it when you want to know where something appears (its position) inside an array or string.
<=======

=======>
a3.
lastIndexOf()
    lastIndexOf() in JavaScript finds the last occurrence of a character or substring in a string, and returns its index.
    If not found, it returns -1.

    Why ?
    Use it when you want to find where something appears last in a string.
<=======

=======>
a4.
includes()
    includes() in JavaScript checks if a string contains a certain character or substring.
    It returns true or false.

    Why ?
    Use it when you want to simply check if something exists inside a string.
<=======

=======>
a5.
startsWith()
    startsWith() in JavaScript checks if a string begins with a specific character or substring.
    It returns true or false.

    Why ?
    Use it when you want to know if a string starts with something specific.
<=======

=======>
a6.
endsWith()
    endsWith() in JavaScript checks if a string ends with a specific character or substring.
    It returns true or false.

    Why ?
    Use it when you want to confirm the ending of a string.
<=======

=======>
a7.
charAt()
    charAt() in JavaScript returns the character at a specific index in a string.

    Why? 
    Use it when you want to get a single character from a string.
<=======

=======>
a8.
charCodeAt()
    charCodeAt() in JavaScript returns the Unicode number (ASCII code) of the character at a specific index.

    Why?
    Use it when you need to know the Unicode/ASCII value of a character.
<=======

=======>
a9.
toUpperCase()
    toUpperCase() in JavaScript converts all letters in a string to uppercase (capital letters).

    Why?
    Use it when you want to make text all capital — for display, comparison, etc.
<=======

=======>
b1.
toLowerCase()
    toLowerCase() in JavaScript converts all letters in a string to lowercase (small letters).

    Why?
    Use it when you want to make text all small — for display, comparison, or formatting.
<=======

=======>
b2.
slice()
    slice() in JavaScript cuts a part of a string and returns it as a new string.

    Why?
    Use it when you want to take out part of a string (without changing the original).
<=======

=======>
b3.
substring()
    substring() in JavaScript gets part of a string between two indexes and returns it as a new string.

    Why?
    Use it when you want to extract some part of a string — similar to slice() but behaves slightly 
    differently with negative numbers.
<=======

=======>
b4.
substr()
    substr() in JavaScript extracts part of a string, starting from a position, for a given length.

    Why?
    Use it when you want to cut a piece of a string based on start position + how many characters you want.
<=======

=======>
b5.
split()
    split() in JavaScript divides a string into an array based on a separator.

    Why?
    Use it when you want to break a string into parts (words, letters, etc.).
<=======

=======>
b6.
join()
    join() in JavaScript joins all elements of an array into a single string.

    Why?
    Use it when you want to combine array items into one string (with or without a separator).
<=======

=======>
b7.
replace()
    replace() in JavaScript replaces a part of a string with a new substring.

    Why?
    Use it when you want to swap a specific part of the string with something else.
<=======

=======>
b8.
replaceAll()
    replaceAll() in JavaScript replaces all occurrences of a substring or pattern in a string with a new substring.

    Why?
    Use it when you want to replace every occurrence of a pattern in the string, without using regular expressions.
<=======

=======>
b9.
trim()
    trim() in JavaScript removes whitespace (spaces, tabs, newlines) from the beginning and end of a string.

    Why?
    Use it when you want to clean up a string by removing unwanted spaces at the start or end, but keep the inner spaces intact.
<=======

=======>
c1.
trimStart()
    trimStart() in JavaScript removes whitespace from the beginning (start) of a string.

    Why?
    Use it when you want to clean up a string by removing spaces, tabs, or newlines from the beginning of the
    string, but keep the spaces at the end intact.
<=======

=======>
c2.
trimEnd()
    trimEnd() in JavaScript removes whitespace from the end of a string.

    Why?
    Use it when you want to clean up a string by removing spaces, tabs, or newlines from the end of the string, 
    but keep the spaces at the beginning intact.
<=======

=======>
c3.
concat()
    concat() in JavaScript is used to combine multiple strings into one string.

    Why?
    Use it when you want to join two or more strings together into a single string.
<=======

=======>
c4.
padStart()
    padStart() in JavaScript pads a string from the beginning to a specific length with a specified character or string.

    Why?
    Use it when you want to ensure a string reaches a certain length by adding characters at the start, such as 
    padding numbers with leading zeros.
<=======

=======>
c5.
padEnd()
    padEnd() in JavaScript pads a string from the end to a specific length with a specified character or string.

    Why?
    Use it when you want to ensure a string reaches a certain length by adding characters at the end, like 
    formatting data for alignment in tables or displaying fixed-length strings.
<=======

c6
repeat()
<=======
