=======>
a1.
Array
    * Array = a special data structure that holds a list of values in a single variable.
    * Each value inside the array is called an element.
    * Each element has an index (starts from 0).

    let fruits = ["apple", "banana", "cherry"];
    // Indexes:    0        1         2

    Why?
    * To store multiple related values together.
    * To organize data neatly.
    * To iterate easily over items (using loops).
    * To perform batch operations like sorting, filtering, mapping, etc.
    * Saves memory and makes code cleaner.
<=======

=======>
a2.
Object
    An Object in JavaScript is a collection of key-value pairs.
    Key: A string (can also be a symbol).
    Value: Can be any data type (string, number, array, another object, etc.).

    Why?
    Objects help you store and organize related data in a single structure.
<=======

=======>
a3.
Set 
    A Set is a collection of unique values. Unlike arrays, sets do not allow duplicates.
    * A Set can store any type of value (primitive values, objects, etc.).
    * It is part of the ES6 (ECMAScript 2015) standard.

    Why?
    * To store unique values without duplicates.
    * Sets provide efficient lookup and quick insertion.
    * Useful when you want to eliminate duplicate values from a list.
<=======

=======>
a4.
Map
    A Map is a collection of key-value pairs where the keys can be of any data type (including objects or functions), unlike objects, where keys are always strings or symbols.
    A Map remembers the insertion order of the keys.
    It allows any data type as a key (even objects, arrays, and functions).

    Why?
    * Map offers flexible keys (can be any type).
    * It provides efficient lookups and insertion times (similar to Sets).
    * It is good for storing key-value pairs and maintaining insertion order.
<=======

=======>
a5.
WeakSet
<=======

=======>
a6.
WeakMap
<=======

=======>
a7.
Stack
<=======

=======>
a8.
Queue
<=======

=======>
a9.
Linked List
<=======

=======>
b1.
Hash Table
<=======
