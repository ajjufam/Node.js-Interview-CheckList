=======>
a1.
Array
    * Array = a special data structure that holds a list of values in a single variable.
    * Each value inside the array is called an element.
    * Each element has an index (starts from 0).

    let fruits = ["apple", "banana", "cherry"];
    // Indexes:    0        1         2

    Why?
    * To store multiple related values together.
    * To organize data neatly.
    * To iterate easily over items (using loops).
    * To perform batch operations like sorting, filtering, mapping, etc.
    * Saves memory and makes code cleaner.
<=======

=======>
a2.
Object
    An Object in JavaScript is a collection of key-value pairs.
    Key: A string (can also be a symbol).
    Value: Can be any data type (string, number, array, another object, etc.).

    Why?
    Objects help you store and organize related data in a single structure.
<=======

=======>
a3.
Set 
    A Set is a collection of unique values. Unlike arrays, sets do not allow duplicates.
    * A Set can store any type of value (primitive values, objects, etc.).
    * It is part of the ES6 (ECMAScript 2015) standard.

    Why?
    * To store unique values without duplicates.
    * Sets provide efficient lookup and quick insertion.
    * Useful when you want to eliminate duplicate values from a list.
<=======

=======>
a4.
Map
    A Map is a collection of key-value pairs where the keys can be of any data type (including objects or functions), unlike objects, where keys are always strings or symbols.
    A Map remembers the insertion order of the keys.
    It allows any data type as a key (even objects, arrays, and functions).

    Why?
    * Map offers flexible keys (can be any type).
    * It provides efficient lookups and insertion times (similar to Sets).
    * It is good for storing key-value pairs and maintaining insertion order.
<=======

=======>
a5.
WeakSet
    A WeakSet is a special type of Set where:
    * It can only store objects (not primitive values like strings, numbers, etc.).
    * The references to objects in a WeakSet are weak. This means if there are no other references to the object, it can be garbage collected.
    * It does not have a size property (because it doesn't keep track of the number of objects, for memory optimization).
    * It has fewer methods compared to the regular Set.

    Why?
    * Memory efficiency: Useful for scenarios where you want to store objects but don’t want them to prevent garbage collection.
    * WeakSets are primarily used in cases where you want to track objects without preventing them from being cleaned up by the garbage collector.
<=======

=======>
a6.
WeakMap
    A WeakMap is like a Map, but:
    * Keys must be objects (not primitive values like numbers or strings).
    * Keys are held weakly — if no other reference to a key exists, it can be garbage collected.
    * It does not expose its size or allow iteration (for memory safety reasons).

    Why?
        * To associate data with an object without preventing garbage collection.
        * It helps when you want to store private data related to an object that should be cleaned up 
        automatically once the object is no longer used.
<=======

=======>
a7.
Stack
    A Stack is a linear data structure that works on the LIFO principle:
    * LIFO = Last In, First Out
    * (Meaning: the last item added is the first one to be removed.)

    Why?
    * To reverse something (like a string).
    * To track history (like browser back button, undo actions).
    * To manage function calls (like JavaScript call stack).
<=======

=======>
a8.
Queue
    A Queue is a linear data structure that works on the FIFO principle:
    * FIFO = First In, First Out
    * (Meaning: the first item added is the first one to be removed.)

    Why?
    Order matters — first thing comes out first.
    Useful for:
    * Task scheduling (printer queue, message queue)
    * Managing async operations (like API request queue)
    * Breadth-first search (in trees, graphs)
<=======

Data Structure | Add             | Remove               | Principle
Stack          | push() (at end) | pop() (from end)     | LIFO (Last In, First Out)
Queue          | push() (at end) | shift() (from start) | FIFO (First In, First Out)

🔥 Simple View:
Stack =
Push ➡️ Push ➡️ Push ➡️ Pop (from end)

Queue =
Push ➡️ Push ➡️ Push ➡️ Shift (from start)

=======>
a9.
Linked List
    A Linked List is a linear data structure where each element points to the next element.
    Each item = a Node (with two parts: value + next).

    Why?
    Easy to insert or delete items (no shifting like arrays).
    Useful when:
    * You don't know the final size in advance.
    * You need dynamic memory usage.
    * You want fast insertions/deletions.
<=======

=======>
b1.
Hash Table
    A Hash Table is a key-value storage where you store and access data super fast using a key.
    * In JavaScript, Object {} and Map are basically hash tables internally.

    Why?
    * Fast 🔥 lookups
    * Fast 🔥 insertions
    * Fast 🔥 deletions
    * Used when you want to find something quickly using a key (like a dictionary 📖)
<=======
